{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","React","Component","render","emoList","Object","entries","this","props","emotions","className","map","element","index","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","ret","url","axios","get","then","response","console","log","statusText","output","data","label","style","color","fontSize","score","catch","err","Error","sendForEmotionAnalysis","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"qOAIA,MAAMA,UAAqBC,IAAMC,UAC7BC,SAGA,IAAIC,EAAUC,OAAOC,QAAQC,KAAKC,MAAMC,UAEtC,OACE,8BASE,uBAAOC,UAAU,uBAAjB,SACE,gCAEIN,EAAQO,KAAI,CAACC,EAASC,IACX,+BAAI,6BAAiBD,EAAQ,IAAhBC,GAAwB,6BAAKD,EAAQ,iBAW9DZ,Q,gBC5Bf,MAAMc,UAAYb,IAAMC,UAAW,eAAD,oBAChCa,MAAQ,CAACC,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzCC,KAAM,OACRC,gBAAgB,GAChBC,WAAU,GAJc,KAOhCC,eAAiB,KACfC,SAASC,eAAe,aAAaC,MAAQ,GACtB,QAApBnB,KAAKQ,MAAMK,MACZb,KAAKoB,SAAS,CAACX,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzDC,KAAM,OACNC,gBAAgB,GAChBC,WAAU,KAbkB,KAkBhCM,cAAgB,KACdJ,SAASC,eAAe,aAAaC,MAAQ,GACtB,SAApBnB,KAAKQ,MAAMK,MACZb,KAAKoB,SAAS,CAACX,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzDC,KAAM,MACNC,gBAAgB,GAChBC,WAAU,KAxBkB,KA6BhCO,yBAA2B,KACzBtB,KAAKoB,SAAS,CAACL,WAAU,IACzB,IAAIQ,EAAM,GACNC,EAAM,IAGRA,EADqB,QAApBxB,KAAKQ,MAAMK,KACNW,EAAI,sBAAsBP,SAASC,eAAe,aAAaC,MAE/DK,EAAI,wBAAwBP,SAASC,eAAe,aAAaC,MAEzEI,EAAME,IAAMC,IAAIF,GAChBD,EAAII,MAAMC,IAGR,GAFAC,QAAQC,IAAIF,GAEgB,OAAxBA,EAASG,WAAqB,CAC9B,IAAIC,EAAS,GAEbhC,KAAKoB,SAAS,CAACN,gBAAiBkB,IAE1BA,EADuB,aAAxBJ,EAASK,KAAKC,MACJ,sBAAKC,MAAO,CAACC,MAAM,QAAQC,SAAS,IAApC,kCAA+DT,EAASK,KAAKK,SACvD,aAAxBV,EAASK,KAAKC,MACZ,sBAAKC,MAAO,CAACC,MAAM,MAAMC,SAAS,IAAlC,kCAA6DT,EAASK,KAAKK,SAE3E,sBAAKH,MAAO,CAACC,MAAM,SAASC,SAAS,IAArC,iCAA+DT,EAASK,KAAKK,SAE1FtC,KAAKoB,SAAS,CAACN,gBAAgBkB,QACnCO,OAAMC,IACNX,QAAQC,IAAIU,GACZX,QAAQC,IAAIU,EAAIZ,UAChB,IAAII,EAASQ,EAAIZ,SAASK,KAAKQ,MAC/BzC,KAAKoB,SAAS,CAACN,gBAAgBkB,QA3DL,KA+DhCU,uBAAyB,KACvB1C,KAAKoB,SAAS,CAACL,WAAU,IACzB,IAAIQ,EAAM,GACNC,EAAM,IAERA,EADqB,QAApBxB,KAAKQ,MAAMK,KACNW,EAAI,oBAAoBP,SAASC,eAAe,aAAaC,MAE7DK,EAAI,uBAAuBP,SAASC,eAAe,aAAaC,MAExEI,EAAME,IAAMC,IAAIF,GAMhBD,EAAII,MAAMC,IACR5B,KAAKoB,SAAS,CAACN,gBAAgB,cAAC,EAAD,CAAcZ,SAAU0B,EAASK,YACjEM,OAAMC,IACHX,QAAQC,IAAIU,GACZX,QAAQC,IAAIU,EAAIZ,UAChB,IAAII,EAASQ,EAAIZ,SAASK,KAAKQ,MAC/BzC,KAAKoB,SAAS,CAACN,gBAAgBkB,QAKrCpC,SACE,OACE,sBAAKO,UAAU,MAAf,UACA,wBAAQA,UAAU,eAAewC,QAAS3C,KAAKgB,eAA/C,kBACE,wBAAQb,UAAU,eAAgBwC,QAAS3C,KAAKqB,cAAhD,iBACA,uBAAK,uBACJrB,KAAKQ,MAAMC,UACZ,uBACA,wBAAQN,UAAU,cAAcwC,QAAS3C,KAAKsB,yBAA9C,+BACA,wBAAQnB,UAAU,cAAcwC,QAAS3C,KAAK0C,uBAA9C,6BACA,uBACK1C,KAAKQ,MAAMM,oBAMTP,QCrGAqC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,EAAGoB,SAAQC,SAAQC,SAAQC,SAAQC,cAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASxD,OACP,cAAC,IAAMyD,WAAP,UACE,cAAC,EAAD,MAEFpC,SAASC,eAAe,SAM1B0B,K","file":"static/js/main.77eb1553.chunk.js","sourcesContent":["import React from 'react';\n// eslint-disable-next-line\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n    render() {\n    // Make a list out of the returned emotions using Object.entries()\n    // It's a key-value pair otherwise. Can't loop over it.\n    let emoList = Object.entries(this.props.emotions);\n\n      return (  \n        <div>\n          {/*You can remove this line and the line below. */}\n          {/* {console.log(emoList)} */}\n          {/* {JSON.stringify(this.props.emotions)}\n          {console.log(typeof this.props.emotions)}\n          {console.log(typeof Object.entries(this.props.emotions))}\n          {console.log(Object.entries(this.props.emotions).map((element, index) => {\n              return \"x: \" + index + \": \" + element;\n          }))} */}\n          <table className=\"table table-bordered\">\n            <tbody>\n            {\n                emoList.map((element, index) => {\n                    return <tr><td key={index}>{element[0]}</td><td>{element[1]}</td></tr>;\n                })\n                //Write code to use the .map method that you worked on in the Hands-on React lab to extract the emotions\n            }\n            </tbody>\n          </table>\n          </div>\n          );\n        }\n    \n}\nexport default EmotionTable;\n","import './bootstrap.min.css';\n// eslint-disable-next-line\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n            mode: \"text\",\n          sentimentOutput:[],\n          sentiment:true\n        }\n  \n  renderTextArea = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"url\") {\n      this.setState({innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"text\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    } \n  }\n\n  renderTextBox = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"text\") {\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"url\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    }\n  }\n\n  sendForSentimentAnalysis = () => {\n    this.setState({sentiment:true});\n    let ret = \"\";\n    let url = \".\";\n\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/sentiment?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/sentiment?text=\"+document.getElementById(\"textinput\").value;\n    }\n    ret = axios.get(url);\n    ret.then((response)=>{\n      console.log(response);  \n      //Include code here to check the sentiment and fomrat the data accordingly\n      if (response.statusText === \"OK\") {\n          let output = \"\";\n          // Clear last \n          this.setState({sentimentOutput: output});\n            if(response.data.label === \"positive\") {\n                output = <div style={{color:\"green\",fontSize:20}}>Positive with score: {response.data.score}</div>\n            } else if (response.data.label === \"negative\"){\n                output = <div style={{color:\"red\",fontSize:20}}>Negative with score: {response.data.score}</div>\n            } else {\n                output = <div style={{color:\"orange\",fontSize:20}}>Neutral with score: {response.data.score}</div>\n            }\n            this.setState({sentimentOutput:output});\n    }}).catch(err => {\n        console.log(err);\n        console.log(err.response);\n        let output = err.response.data.Error;\n        this.setState({sentimentOutput:output});\n    });\n  }\n\n  sendForEmotionAnalysis = () => {\n    this.setState({sentiment:false});\n    let ret = \"\";\n    let url = \".\";\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/emotion?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/emotion/?text=\"+document.getElementById(\"textinput\").value;\n    }\n    ret = axios.get(url);\n\n    // // Test only. Should render a table.\n    // let response = {'data':{'sad':-0.3, 'happy': 0.25, 'eNgry': 0.89}};\n    // this.setState({sentimentOutput:<EmotionTable emotions={response.data}/>});\n\n    ret.then((response)=>{\n      this.setState({sentimentOutput:<EmotionTable emotions={response.data}/>});\n  }).catch(err => {\n        console.log(err);\n        console.log(err.response);\n        let output = err.response.data.Error;\n        this.setState({sentimentOutput:output});\n  });\n  }\n  \n\n  render() {\n    return (  \n      <div className=\"App\">\n      <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n        <button className=\"btn btn-dark\"  onClick={this.renderTextBox}>URL</button>\n        <br/><br/>\n        {this.state.innercomp}\n        <br/>\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n        <br/>\n            {this.state.sentimentOutput}\n      </div>\n    );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// eslint-disable-next-line\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}